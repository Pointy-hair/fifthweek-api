<#@ include file="VisualStudioHelper.ttinclude" once="true" #>
<#@ include file="VisualStudioHelper2.ttinclude" once="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var AutoBuilderAttributeName = "AutoBuilder";

    foreach(UnifiedClass unifiedClass in allClasses)
    {
        var allAttributes = unifiedClass.GetAllAttributes();
        if (allAttributes.All(_ => !_.Name.StartsWith(AutoBuilderAttributeName)))
        {
            continue;
        }

        var parameters = AutoConstructorParameter.GetParametersForClass(unifiedClass);
        if (parameters.Count == 0)
        {
            continue;
        }

        unifiedClass.WriteNamespaceAndClass(() => {
#>
        public Builder ToBuilder()
        {
            var builder = new Builder();
<#
    for (var i = 0; i < parameters.Count; i++)
    {
        var parameter = parameters[i];
#>
            builder.<#= parameter.AssigneeName #> = this.<#= parameter.AssigneeName #>;
<#
    }
#>
            return builder;
        }

        public <#= unifiedClass.FirstCodeClass.Name #> Copy(Action<Builder> applyDelta)
        {
            var builder = this.ToBuilder();
            applyDelta(builder);
            return builder.Build();
        }

        public partial class Builder
        {
<#
    for (var i = 0; i < parameters.Count; i++)
    {
        var parameter = parameters[i];
#>
            public <#= parameter.TypeName #> <#= parameter.AssigneeName #> { get; set; }
<#
    }
#>

            public <#= unifiedClass.FirstCodeClass.Name #> Build()
            {
                return new <#= unifiedClass.FirstCodeClass.Name #>(
<#
    for (var i = 0; i < parameters.Count; i++)
    {
        var parameter = parameters[i];
#>
                    this.<#= parameter.AssigneeName #><#= i < parameters.Count - 1 ? ", " : ");" #>
<#
    }
#>
            }
        }
<#
        });
    }
#>