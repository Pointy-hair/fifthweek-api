<#@ include file="VisualStudioHelper.ttinclude" once="true" #>
<#@ include file="VisualStudioHelper2.ttinclude" once="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var AutoSqlAttributeName = "AutoSql";
    var TableAttributeParameterName = "Table";

    foreach(var unifiedClass in UnifiedClassesInProject.Values)
    {
        var allAttributes = unifiedClass.GetAllAttributes();
        var autoSqlAttribute = allAttributes.FirstOrDefault(_ => _.Name.StartsWith(AutoSqlAttributeName));
        if (autoSqlAttribute == null)
        {
            continue;
        }

        var publicPrimitiveProperties = unifiedClass.GetAllPublicGetters().Where(_ => IsPrimitiveType(this, _.Type.CodeType)).ToList();
        if (publicPrimitiveProperties.Count == 0)
        {
            continue;
        }

        var attributeParameters = ParseAttribute(autoSqlAttribute.Value);
        var tableName = TryParseAttributeStringParameter(TableAttributeParameterName, attributeParameters);
        tableName = tableName ?? (unifiedClass.FirstCodeClass.Name + "s");

        StringBuilder sql;
        sql = new StringBuilder();
        for (var i = 0; i < publicPrimitiveProperties.Count; i++)
        {
            var property = publicPrimitiveProperties[i];
            var isLast = i == publicPrimitiveProperties.Count - 1;
            sql.Append("@");
            sql.Append(property.Name);
            if (!isLast)
            {
                sql.Append(", ");
            }
        }

        var properties = sql.ToString();
        var propertiesWithoutAt = properties.Replace("@", string.Empty);
        var entityMaskInitialization = properties.Replace("@", "entity.");

        var keyProperties = publicPrimitiveProperties.Where(IsPrimaryKey).ToList();
        var keyConstructorParameters = AutoConstructorParameter.GetParametersForProperties(keyProperties);
        sql = new StringBuilder();
        for (var i = 0; i < keyProperties.Count; i++)
        {
            var property = keyProperties[i];
            var isLast = i == keyProperties.Count - 1;
            sql.Append("Target.");
            sql.Append(property.Name);
            sql.Append(" = Source.");
            sql.Append(property.Name);
            if (!isLast)
            {
                sql.Append(" AND ");
            }
        }
        
        var targetSourceIdentityPredicate = sql.ToString();

        unifiedClass.WriteNamespaceAndClassWithSignature(" : IIdentityEquatable", null, () => {
#>
public const string Table = "<#= tableName #>";

<# RenderConstructor(unifiedClass.FirstCodeClass.Name, keyConstructorParameters, this); #>

public bool IdentityEquals(object other)
{
    if (ReferenceEquals(null, other))
    {
        return false;
    }

    if (ReferenceEquals(this, other))
    {
        return true;
    }

    if (other.GetType() != this.GetType())
    {
        return false;
    }

    return this.IdentityEquals((<#= unifiedClass.FirstCodeClass.Name #>)other);
}

protected bool IdentityEquals(<#= unifiedClass.FirstCodeClass.Name #> other)
{
<#
    foreach(CodeProperty codeProperty in keyProperties)
    {
#>
    if (!object.Equals(this.<#= codeProperty.Name #>, other.<#= codeProperty.Name #>))
    {
        return false;
    }

<#
    }
#>
    return true;
}

[Flags]
public enum Fields
{
    Empty = 0,
<#
            var bitwiseIndex = 1;
            for (var i = 0; i < publicPrimitiveProperties.Count; i++)
            {
                var property = publicPrimitiveProperties[i];
                var isLast = i == publicPrimitiveProperties.Count - 1;
#>
    <#= property.Name #> = <#= bitwiseIndex #><#= isLast ? string.Empty : ", " #>
<#
                bitwiseIndex = bitwiseIndex << 1;
            }
#>
}
<#
        }, () => {
#>
public static System.Threading.Tasks.Task InsertAsync(
    this System.Data.Common.DbConnection connection, 
    System.Collections.Generic.IEnumerable<<#= unifiedClass.FirstCodeClass.Name #>> entities, 
    bool idempotent = true, 
    System.Data.IDbTransaction transaction = null)
{
    return Dapper.SqlMapper.ExecuteAsync(
        connection, 
        InsertStatement(idempotent), 
        entities.Select(entity => new 
        {
            <#= entityMaskInitialization #>
        }).ToArray(),
        transaction);
}

public static System.Threading.Tasks.Task InsertAsync(
    this System.Data.Common.DbConnection connection, 
    <#= unifiedClass.FirstCodeClass.Name #> entity,
    bool idempotent = true, 
    System.Data.IDbTransaction transaction = null)
{
    return Dapper.SqlMapper.ExecuteAsync(
        connection, 
        InsertStatement(idempotent), 
        new 
        {
            <#= entityMaskInitialization #>
        },
        transaction);
}

public static System.Threading.Tasks.Task<int> InsertAsync(
    this System.Data.Common.DbConnection connection,
    SqlGenerationParameters<<#= unifiedClass.FirstCodeClass.Name #>, <#= unifiedClass.FirstCodeClass.Name #>.Fields> parameters)
{
    var sql = new System.Text.StringBuilder();

    if (parameters.Declarations != null)
    {
        sql.AppendLine(parameters.Declarations);
    }
    
    int currentIndex = 0;
    if (parameters.Conditions != null)
    {
        foreach (var condition in parameters.Conditions)
        {
            sql.Append("IF ");
            sql.AppendLine(condition); // Remember to use `WITH (UPDLOCK, HOLDLOCK)` in your conditions! See: http://samsaffron.com/blog/archive/2007/04/04/14.aspx
            sql.AppendLine("BEGIN");
            ++currentIndex;
        }
    }

    sql.AppendLine(InsertStatement(parameters.IdempotentInsert));

    if (parameters.Conditions != null)
    {
        sql.AppendLine("SELECT -1 AS FailedConditionIndex"); // Indicates all conditions passed and operation was attempted.
            
        foreach (var condition in parameters.Conditions)
        {
            sql.AppendLine("END");
            sql.AppendLine("ELSE");
            sql.Append("SELECT ").Append(--currentIndex).AppendLine(" AS FailedConditionIndex");
        }
    }

    var entity = parameters.Entity;
    var parameterObject = parameters.ExcludedFromInput != null
        ? AllExceptSpecifiedParameters(entity, parameters.ExcludedFromInput.Value)
        : new Dapper.DynamicParameters(new { <#= entityMaskInitialization #> });

    if (parameters.AdditionalParameters != null)
    {
        parameterObject.AddDynamicParams(parameters.AdditionalParameters);
    }

    return Dapper.SqlMapper.ExecuteScalarAsync<int>(
        connection,
        sql.ToString(),
        parameterObject);
}

public static System.Threading.Tasks.Task UpsertAsync(
    this System.Data.Common.DbConnection connection, 
    <#= unifiedClass.FirstCodeClass.Name #> entity, 
    <#= unifiedClass.FirstCodeClass.Name #>.Fields fields,
    System.Data.IDbTransaction transaction = null)
{
    return Dapper.SqlMapper.ExecuteAsync(
        connection, 
        UpsertStatement(<#= unifiedClass.FirstCodeClass.Name #>.Fields.Empty, fields), 
        new 
        {
            <#= entityMaskInitialization #>
        },
        transaction);
}

public static System.Threading.Tasks.Task UpsertAsync(
    this System.Data.Common.DbConnection connection, 
    <#= unifiedClass.FirstCodeClass.Name #> entity, 
    <#= unifiedClass.FirstCodeClass.Name #>.Fields mergeOnFields,
    <#= unifiedClass.FirstCodeClass.Name #>.Fields updateFields,
    System.Data.IDbTransaction transaction = null)
{
    return Dapper.SqlMapper.ExecuteAsync(
        connection, 
        UpsertStatement(mergeOnFields, updateFields), 
        new 
        {
            <#= entityMaskInitialization #>
        },
        transaction);
}

public static System.Threading.Tasks.Task UpdateAsync(
    this System.Data.Common.DbConnection connection, 
    <#= unifiedClass.FirstCodeClass.Name #> entity, 
    <#= unifiedClass.FirstCodeClass.Name #>.Fields fields,
    System.Data.IDbTransaction transaction = null)
{
    return Dapper.SqlMapper.ExecuteAsync(connection, UpdateStatement(fields), OnlySpecifiedParameters(entity, fields), transaction);
}

public static System.Threading.Tasks.Task<int> UpdateAsync(
    this System.Data.Common.DbConnection connection,
    SqlGenerationParameters<<#= unifiedClass.FirstCodeClass.Name #>, <#= unifiedClass.FirstCodeClass.Name #>.Fields> parameters)
{
    if (parameters.UpdateMask == null)
    {
        throw new ArgumentException("Must contain update mask", "parameters");
    }

    var sql = new System.Text.StringBuilder();

    if (parameters.Declarations != null)
    {
        sql.AppendLine(parameters.Declarations);
    }
    
    int currentIndex = 0;
    if (parameters.Conditions != null)
    {
        foreach (var condition in parameters.Conditions)
        {
            sql.Append("IF ");
            sql.AppendLine(condition); // Remember to use `WITH (UPDLOCK, HOLDLOCK)` in your conditions! See: http://samsaffron.com/blog/archive/2007/04/04/14.aspx
            sql.AppendLine("BEGIN");
            ++currentIndex;
        }
    }

    sql.AppendLine(UpdateStatement(parameters.UpdateMask.Value));

    if (parameters.Conditions != null)
    {
        sql.AppendLine("SELECT -1 AS FailedConditionIndex"); // Indicates all conditions passed and operation was attempted.
            
        foreach (var condition in parameters.Conditions)
        {
            sql.AppendLine("END");
            sql.AppendLine("ELSE");
            sql.Append("SELECT ").Append(--currentIndex).AppendLine(" AS FailedConditionIndex");
        }
    }

    var parameterObject = OnlySpecifiedParameters(parameters.Entity, parameters.UpdateMask.Value, parameters.ExcludedFromInput);

    if (parameters.AdditionalParameters != null)
    {
        parameterObject.AddDynamicParams(parameters.AdditionalParameters);
    }

    return Dapper.SqlMapper.ExecuteScalarAsync<int>(
        connection,
        sql.ToString(),
        parameterObject);
}

public static string InsertStatement(bool idempotent = true)
{
    const string insert = "INSERT INTO <#= tableName #>(<#= propertiesWithoutAt #>) VALUES(<#= properties #>)";
    return idempotent ? SqlStatementTemplates.IdempotentInsert(insert) : insert;
}

public static string UpsertStatement(<#= unifiedClass.FirstCodeClass.Name #>.Fields mergeOnFields, <#= unifiedClass.FirstCodeClass.Name #>.Fields updateFields)
{
    // HOLDLOCK ensures operation is concurrent by not releasing the U lock on the row after determining
    // it does not exist. See: http://weblogs.sqlteam.com/dang/archive/2009/01/31/UPSERT-Race-Condition-With-MERGE.aspx
    var sql = new System.Text.StringBuilder();
    sql.Append(
        @"MERGE <#= tableName #> WITH (HOLDLOCK) as Target
        USING (VALUES (<#= properties #>)) AS Source (<#= propertiesWithoutAt #>)
        ON    (");
        
    if (mergeOnFields == <#= unifiedClass.FirstCodeClass.Name #>.Fields.Empty)
    {
        sql.Append(@"<#= targetSourceIdentityPredicate #>");
    }
    else
    {
        sql.AppendMergeOnParameters(GetFieldNames(mergeOnFields, false));
    }
        
    sql.Append(@")
        WHEN MATCHED THEN
            UPDATE
            SET        ");
    sql.AppendUpdateParameters(GetFieldNames(updateFields));
    sql.Append(
        @" WHEN NOT MATCHED THEN
            INSERT  (<#= propertiesWithoutAt #>)
            VALUES  (<#= properties.Replace("@", "Source.") #>);");
    return sql.ToString();
}

public static string UpdateStatement(<#= unifiedClass.FirstCodeClass.Name #>.Fields fields)
{
    var sql = new System.Text.StringBuilder();
    sql.Append("UPDATE <#= tableName #> SET ");
    sql.AppendUpdateParameters(GetFieldNames(fields));
    sql.Append(" WHERE <#= targetSourceIdentityPredicate.Replace("Target.", string.Empty).Replace("Source.", "@") #>");
    return sql.ToString();
}

private static System.Collections.Generic.IReadOnlyList<string> GetFieldNames(<#= unifiedClass.FirstCodeClass.Name #>.Fields fields, bool autoIncludePrimaryKeys = true)
{
    var fieldNames = new System.Collections.Generic.List<string>();
<#
            foreach (var property in publicPrimitiveProperties)
            {
                if (IsPrimaryKey(property))
                {
#>
    if (autoIncludePrimaryKeys)
    {
        fieldNames.Add("<#= property.Name #>");
    }

<#
                }
                else
                {
#>
    if (fields.HasFlag(<#= unifiedClass.FirstCodeClass.Name #>.Fields.<#= property.Name #>))
    {
        fieldNames.Add("<#= property.Name #>");
    }

<#
                }

            }
#>
    return fieldNames;
}

private static Dapper.DynamicParameters OnlySpecifiedParameters(
    <#= unifiedClass.FirstCodeClass.Name #> entity, 
    <#= unifiedClass.FirstCodeClass.Name #>.Fields fields,
    <#= unifiedClass.FirstCodeClass.Name #>.Fields? excludedFields = null)
{
    var parameters = new Dapper.DynamicParameters();

    // Assume we never want to exclude primary key field(s) from our input.
<#
            foreach (var property in publicPrimitiveProperties)
            {
                if (IsPrimaryKey(property))
                {
#>
    parameters.Add("<#= property.Name #>", entity.<#= property.Name #>);
<#
                }
                else
                {
#>
    if (fields.HasFlag(<#= unifiedClass.FirstCodeClass.Name #>.Fields.<#= property.Name #>) && (excludedFields == null || !excludedFields.Value.HasFlag(<#= unifiedClass.FirstCodeClass.Name #>.Fields.<#= property.Name #>)))
    {
        parameters.Add("<#= property.Name #>", entity.<#= property.Name #>);
    }

<#
                }

            }
#>
    return parameters;
}

private static Dapper.DynamicParameters AllExceptSpecifiedParameters(
    <#= unifiedClass.FirstCodeClass.Name #> entity, 
    <#= unifiedClass.FirstCodeClass.Name #>.Fields fields)
{
    var parameters = new Dapper.DynamicParameters();

    // Assume we never want to exclude primary key field(s) from our input.
<#
            foreach (var property in publicPrimitiveProperties)
            {
                if (IsPrimaryKey(property))
                {
#>
    parameters.Add("<#= property.Name #>", entity.<#= property.Name #>);
<#
                }
                else
                {
#>
    if (!fields.HasFlag(<#= unifiedClass.FirstCodeClass.Name #>.Fields.<#= property.Name #>))
    {
        parameters.Add("<#= property.Name #>", entity.<#= property.Name #>);
    }

<#
                }

            }
#>
    return parameters;
}

<#
        });
    }
#>
<#+
    public bool IsPrimaryKey(CodeProperty property)
    {
        return property.Attributes.OfType<CodeAttribute>().Any(_ => _.Name.StartsWith("Key"));
    }
#>
