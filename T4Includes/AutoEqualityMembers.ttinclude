<#@ include file="VisualStudioHelper.ttinclude" once="true" #>
<#@ include file="VisualStudioHelper2.ttinclude" once="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var AutoEqualityMembersAttributeName = "AutoEqualityMembers";
    var NonEquatableAttributeName = "NonEquatable";

    foreach(UnifiedClass unifiedClass in allClasses)
    {
        var allAttributes = unifiedClass.GetAllAttributes();
		if (!allAttributes.Any(_ => _.Name.StartsWith(AutoEqualityMembersAttributeName) || _.Name.StartsWith(AutoPrimitiveAttributeName)))
        {
            continue;
        }

        var publicProperties = unifiedClass.GetAllPublicGetters().Where(p => p.Attributes.OfType<CodeAttribute>().All(_ => !_.Name.StartsWith(NonEquatableAttributeName))).ToList();
        if (publicProperties.Count == 0)
        {
            continue;
        }

        var formatParameterIndexes = new StringBuilder();
        for (var i = 0; i < publicProperties.Count; i++)
        {
            var property = publicProperties[i];
            var isLast = i == publicProperties.Count - 1;
            var isString = property.Type.CodeType.FullName == "System.String";

            if (isString)
            {
                formatParameterIndexes.Append("\\\"");
            }

            formatParameterIndexes.Append("{");
            formatParameterIndexes.Append(i);
            formatParameterIndexes.Append("}");

            if (isString)
            {
                formatParameterIndexes.Append("\\\"");
            }

            if (!isLast)
            {
                formatParameterIndexes.Append(", ");
            }
        }

        var formatParameters = new StringBuilder();
        for (var i = 0; i < publicProperties.Count; i++)
        {
            var property = publicProperties[i];
            var isLast = i == publicProperties.Count - 1;

            formatParameters.Append("this.");
            formatParameters.Append(property.Name);
            formatParameters.Append(" == null ? \"null\" : ");
            formatParameters.Append("this.");
            formatParameters.Append(property.Name);
            formatParameters.Append(".ToString()");

            if (!isLast)
            {
                formatParameters.Append(", ");
            }
        }

        unifiedClass.WriteNamespaceAndClass(() => {
#>
        public override string ToString()
        {
            return string.Format("<#= unifiedClass.FirstCodeClass.Name #>(<#= formatParameterIndexes.ToString() #>)", <#= formatParameters.ToString() #>);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return this.Equals((<#= unifiedClass.FirstCodeClass.Name #>)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = 0;
<#
    foreach(CodeProperty codeProperty in publicProperties)
    {
		if (IsEnumerableType(codeProperty.Type.CodeType, VisualStudioHelper))
        {
#>
                hashCode = (hashCode * 397) ^ (this.<#= codeProperty.Name #> != null 
				    ? this.<#= codeProperty.Name #>.Aggregate(0, (previous, current) => 
				        { 
				            unchecked
				            {
				                return (previous * 397) ^ (current != null ? current.GetHashCode() : 0);
				            }
				        })
				    : 0);
<#
        }
		else
        {
#>
                hashCode = (hashCode * 397) ^ (this.<#= codeProperty.Name #> != null ? this.<#= codeProperty.Name #>.GetHashCode() : 0);
<#
        }
    }
#>
                return hashCode;
            }
        }

        protected bool Equals(<#= unifiedClass.FirstCodeClass.Name #> other)
        {
<#
    foreach(CodeProperty codeProperty in publicProperties)
    {
		if (IsEnumerableType(codeProperty.Type.CodeType, VisualStudioHelper))
        {
#>
            if (this.<#= codeProperty.Name #> != null && other.<#= codeProperty.Name #> != null)
            {
                if (!this.<#= codeProperty.Name #>.SequenceEqual(other.<#= codeProperty.Name #>))
                {
                    return false;    
                }
            }
            else if (this.<#= codeProperty.Name #> != null || other.<#= codeProperty.Name #> != null)
            {
                return false;
            }

<#
        }
		else
        {
#>
            if (!object.Equals(this.<#= codeProperty.Name #>, other.<#= codeProperty.Name #>))
            {
                return false;
            }

<#
        }
    }
#>
            return true;
        }
<#
        });
    }
#>