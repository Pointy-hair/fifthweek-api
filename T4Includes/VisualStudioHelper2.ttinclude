<#@ include file="VisualStudioHelper.ttinclude" once="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#
	Initialize(this, VisualStudioHelper);
#>
<#+
	public const string Tab = "    ";

	public static IReadOnlyDictionary<string, UnifiedClass> UnifiedClassesInSolution;
	public static IReadOnlyDictionary<string, UnifiedClass> UnifiedClassesInProject;

	public static void Initialize(TextTransformation output, AutomationHelper visualStudioHelper)
	{
		var LiftMembersAttributeName = "LiftMembers";
		var LiftedMembersChildClassName = "LiftedMembers";
		
		var codeMap = new Dictionary<string, UnifiedClassBuilder>();
		var stopwatch = Stopwatch.StartNew();
		foreach (var project in visualStudioHelper.GetAllProjects())
        {
			var codeFiles = visualStudioHelper.GetAllProjectItems(project)
				.OfType<ProjectItem>()
				.Where(_ => _.FileCodeModel != null);

			// A file may contain many of the same partial class.
			// A class may be split across multiple files.
			foreach (var codeFile in codeFiles)
			{
				var codeClasses = visualStudioHelper
					.CodeModel
					.GetAllCodeElementsOfType(codeFile.FileCodeModel.CodeElements, vsCMElement.vsCMElementClass, false)
					.OfType<CodeClass>();

				foreach (var codeClass in codeClasses)
				{
					var qualifiedClassName = codeClass.Namespace.Name + "." + codeClass.Name;
					if (!codeMap.ContainsKey(qualifiedClassName))
					{
						codeMap.Add(qualifiedClassName, new UnifiedClassBuilder()
						{
							IsCurrentProject = visualStudioHelper.CurrentProject == project
						});
					}

					// Add code file if not already added (multiple partial files can exist in one file).
					var codeFilesForClass = codeMap[qualifiedClassName].CodeFiles;
					if (codeFilesForClass.All(_ => _.FileNames[0] != codeFile.FileNames[0]))
					{
						codeMap[qualifiedClassName].CodeFiles.Add(codeFile);
					}

					// Add code class.
					codeMap[qualifiedClassName].CodeClasses.Add(codeClass);

					// Check for lifted types.
					foreach (CodeAttribute attribute in codeClass.Attributes)
					{
						if (!attribute.Name.StartsWith(LiftMembersAttributeName))
						{
							continue;
						}

						foreach (CodeElement codeElement in codeClass.Children)
						{
							var childClass = codeElement as CodeClass;
							if (childClass != null && childClass.Name == LiftedMembersChildClassName)
							{
								// Add lifted members code class.
								codeMap[qualifiedClassName].CodeClasses.Add(childClass);
							}
						}
					}
				}
			}
        }

		var unifiedClassesInSolution = new Dictionary<string, UnifiedClass>();
		var unifiedClassesInProject = new Dictionary<string, UnifiedClass>();
		foreach (var kvp in codeMap)
        {
			var unifiedClass = new UnifiedClass(kvp.Value.CodeFiles, kvp.Value.CodeClasses, output, visualStudioHelper);
			unifiedClassesInSolution.Add(kvp.Key, unifiedClass);
			
			if (kvp.Value.IsCurrentProject)
            {
				unifiedClassesInProject.Add(kvp.Key, unifiedClass);
            }
        }

		UnifiedClassesInSolution = unifiedClassesInSolution;
		UnifiedClassesInProject = unifiedClassesInProject;

		output.WriteLine(string.Format("//// Generated on {0} (UTC)", DateTime.UtcNow.ToString()));
		output.WriteLine(string.Format("//// Mapped solution in {0}s", Math.Round(stopwatch.Elapsed.TotalSeconds, 2)));
	}

	public static bool IsEnumerableType(CodeType type, AutomationHelper visualStudioHelper)
	{
		var interfaces = Enumerable.Empty<EnvDTE.CodeInterface>();
		if (type is CodeClass)
        {
			var codeClass = (CodeClass)type;

			if (codeClass.FullName == "System.String")
            {
				return false;
            }

			interfaces = visualStudioHelper.CodeModel.GetAllImplementedInterfaces(codeClass);
        }
		else if (type is CodeInterface)
        {
			var codeInterface = (CodeInterface)type;
			interfaces = new[] { codeInterface }.Concat(visualStudioHelper.CodeModel.GetAllBaseInterfaces(codeInterface));
        }
		
		return interfaces.Any(_ => _.FullName == "System.Collections.IEnumerable");
	}

    public static bool IsNullablePrimitiveType(CodeType type)
    {
        const string nullablePostfix = "?";
        const string nullablePrefix = "System.Nullable<";
        var typeName = type.FullName;
        return typeName.StartsWith(nullablePrefix) || typeName.EndsWith(nullablePostfix);
    }

	public static bool IsReferenceType(CodeType type)
    {
        return type is CodeClass || IsNullablePrimitiveType(type);
    }

    public static bool IsPrimitiveType(TextTransformation output, CodeType type)
    {
        if(type is CodeEnum){
            return true;
        }

        var typeName = type.FullName;
        var primitiveTypes = new HashSet<string>(new[] {
            "System.String",
            "System.Guid",
            "System.Boolean",
            "System.DateTime",
			"System.TimeSpan",
            "System.Char",
            "System.Byte",
            "System.Decimal",
            "System.Single",
            "System.Double",
            "System.Int16",
            "System.Int32",
            "System.Int64",
        });

        const string nullablePrefix = "System.Nullable<";
        if (typeName.StartsWith(nullablePrefix))
        {
            typeName = typeName.Substring(nullablePrefix.Length);
            typeName = typeName.Substring(0, typeName.Length - 1);
        }

        const string nullablePostfix = "?";
        if(typeName.EndsWith(nullablePostfix))
        {
            typeName = typeName.Substring(0, typeName.Length - 1);
        }

        return primitiveTypes.Contains(typeName);
    }

    public static string ToLowerCamelCase(string value)
    {
        return value.Substring(0, 1).ToLower() + value.Substring(1);
    }

    public static string StripTypeOf(string typeWrappedWithTypeOf)
    {
        var hasTrailingParenthesis = typeWrappedWithTypeOf.Substring(7);
        return hasTrailingParenthesis.Substring(0, hasTrailingParenthesis.Length - 1);
    }

    public static IReadOnlyList<string> ParseAttribute(string value)
    {
        var retval = new List<string>();
        foreach (var parameter in value.Split(new[] { ',' }))
        {
            retval.Add(parameter.Trim());
        }

        return retval;
    }

    public bool TryParseAttributeFlagParameter(string propertyName, IReadOnlyCollection<string> attributeParameters, bool defaultValue = false)
    {
        var value = TryParseAttributeNamedProperty(propertyName, attributeParameters);
		if (value == null)
        {
			return defaultValue;
        }

        return value == "true";
    }

    public string TryParseAttributeStringParameter(string propertyName, IReadOnlyCollection<string> attributeParameters)
    {
        var value = TryParseAttributeNamedProperty(propertyName, attributeParameters);
        if (value != null)
        {
            value = value.Substring(1);
            value = value.Substring(0, value.Length - 1);
        }

        return value;
    }

    public string TryParseAttributeNamedProperty(string propertyName, IReadOnlyCollection<string> attributeParameters)
    {
        foreach (var attributeParameter in attributeParameters.Where(_ => _.Contains("=")))
        {
            var nameMaxLength = attributeParameter.IndexOf('=');
            var attributeParameterName = attributeParameter.Substring(0, nameMaxLength).Trim();

            if (attributeParameterName == propertyName)
            {
                return attributeParameter.Substring(nameMaxLength + 1).Trim();
            }
        }

        return null;
    }

    public class UnifiedClassBuilder
    {
        public UnifiedClassBuilder()
        {
            this.CodeClasses = new List<CodeClass>();
            this.CodeFiles = new List<ProjectItem>();
        }

        public List<CodeClass> CodeClasses { get; private set; }
        public List<ProjectItem> CodeFiles { get; private set; }
		public bool IsCurrentProject { get; set; }
    }

    public class UnifiedClass
    {
        private readonly TextTransformation output;
        private readonly AutomationHelper visualStudioHelper;
		private IReadOnlyList<string> usedNamespaceCache;
		private IReadOnlyList<CodeAttribute> allAttributesCache;
		private IReadOnlyList<CodeProperty> allPublicGettersCache;
		private IReadOnlyList<CodeFunction> allPublicMethodsCache;
		private IReadOnlyList<CodeVariable> allPrivateReadOnlyFieldsCache;

        public UnifiedClass(IReadOnlyList<ProjectItem> codeFiles, IReadOnlyList<CodeClass> codeClasses, TextTransformation output, AutomationHelper visualStudioHelper)
        {
            this.CodeClasses = codeClasses;
            this.CodeFiles = codeFiles;
            this.FirstCodeClass = codeClasses.First();
            this.output = output;
            this.visualStudioHelper = visualStudioHelper;
            this.CompanionClassName = this.FirstCodeClass.Name + "Extensions";
        }

        public string CompanionClassName { get; private set; }
        public CodeClass FirstCodeClass { get; private set; }
        public IReadOnlyList<CodeClass> CodeClasses { get; private set; }
        public IReadOnlyList<ProjectItem> CodeFiles { get; private set; }

        public IReadOnlyList<CodeAttribute> GetAllAttributes()
        {
			if (this.allAttributesCache != null)
            {
				return this.allAttributesCache;
            }

            var allAttributes = new List<CodeAttribute>();
            foreach(var partialClass in this.CodeClasses)
            {
                foreach(CodeAttribute attribute in partialClass.Attributes)
                {
                    allAttributes.Add(attribute);
                }
            }
        
            return this.allAttributesCache = allAttributes;
        }

        public IReadOnlyList<CodeProperty> GetAllPublicGetters()
        {
			if (this.allPublicGettersCache != null)
            {
				return this.allPublicGettersCache;
            }

            var allProperties = new List<CodeProperty>();
            foreach(var partialClass in this.CodeClasses)
            {
                foreach (CodeElement elem in partialClass.Members)
                {
                    if (elem.Kind == vsCMElement.vsCMElementProperty)
                    {
                        var property = (CodeProperty)elem;
                        if (property.Access != vsCMAccess.vsCMAccessPublic)
                        {
                            continue;
                        }

                        allProperties.Add(property);
                    }
                }
            }
        
            return this.allPublicGettersCache = allProperties;
        }

		public IReadOnlyList<CodeFunction> GetAllPublicMethods()
        {
			if (this.allPublicMethodsCache != null)
            {
				return this.allPublicMethodsCache;
            }

            var allMethods = new List<CodeFunction>();
            foreach(var partialClass in this.CodeClasses)
            {
                foreach (CodeElement elem in partialClass.Members)
                {
                    if (elem.Kind == vsCMElement.vsCMElementFunction)
                    {
                        var function = (CodeFunction)elem;
                        if (function.Access != vsCMAccess.vsCMAccessPublic)
                        {
                            continue;
                        }

                        allMethods.Add(function);
                    }
                }
            }
        
            return this.allPublicMethodsCache = allMethods;
        }

        public IReadOnlyList<CodeVariable> GetAllPrivateReadOnlyFields()
        {
			if (this.allPrivateReadOnlyFieldsCache != null)
            {
				return this.allPrivateReadOnlyFieldsCache;
            }

            var allFields = new List<CodeVariable>();
            foreach(var partialClass in this.CodeClasses)
            {
                foreach (CodeElement elem in partialClass.Members)
                {
                    if (elem.Kind == vsCMElement.vsCMElementVariable)
                    {
                        var field = (CodeVariable)elem;
                        if (field.Access != vsCMAccess.vsCMAccessPrivate || !field.IsConstant || field.IsShared)
                        {
                            continue;
                        }

                        allFields.Add(field);
                    }
                }
            }
        
            return this.allPrivateReadOnlyFieldsCache = allFields;
        }

        public void WriteNamespaceAndClass(Action renderMainClass = null, Action renderExtensionClass = null)
        {
            WriteNamespaceAndClassWithSignature(null, null, renderMainClass, renderExtensionClass);
        }

        public void WriteNamespaceAndClassWithSignature(string mainClassSignature = null, string mainClassHeader = null, Action renderMainClass = null, Action renderExtensionClass = null)
        {
            this.output.WriteLine("namespace " + this.FirstCodeClass.Namespace.Name);
            this.output.WriteLine("{");
			this.output.PushIndent(Tab);

            this.WriteUsings();
			this.output.WriteLine("");
            this.WriteClass(mainClassSignature, mainClassHeader, renderMainClass, renderExtensionClass);
			
			this.output.PopIndent();
            this.output.WriteLine("}");
        }

		public UnifiedClass ResolveUnifiedClass(string typeName)
        {
			// Resolve up the namespace.
			var prefix = this.FirstCodeClass.FullName;
			while (prefix != null)
            {
				var estimatedClassQualifiedName = prefix + "." + typeName;

				if (UnifiedClassesInSolution.ContainsKey(estimatedClassQualifiedName))
				{
					return UnifiedClassesInSolution[estimatedClassQualifiedName];
				}

				var removeUpTo = prefix.LastIndexOf(".");
				if (removeUpTo == -1)
                {
					prefix = null;
                }
				else
				{
					prefix = prefix.Substring(0, removeUpTo);
                }
            }

			// Resolve from imports.
			foreach (var import in this.GetUsedNamespaces())
            {
				var estimatedClassQualifiedName = import + "." + typeName;

				if (UnifiedClassesInSolution.ContainsKey(estimatedClassQualifiedName))
                {
					return UnifiedClassesInSolution[estimatedClassQualifiedName];
                }
            }
			
			throw new Exception("Unable resolve type with short name '" + typeName + "'. Type may not exist in solution (in which case reflection is required), or using statement missing.");
        }

		public IReadOnlyList<string> GetUsedNamespaces()
        {
			if (this.usedNamespaceCache != null)
            {
				return this.usedNamespaceCache;
            }

			// Needs improving - the following will return a superset of namespaces (those from all files the class appears in, including
			// class augmentation file!). This may even cause issues in future.
			var imports = new HashSet<string>();
            foreach (var codeFile in this.CodeFiles)
            {
                foreach (var import in this.GetUsedNamespacesFromChildren(codeFile.FileCodeModel.CodeElements))
                {
                    imports.Add(import.Namespace);
                }
            }

			this.usedNamespaceCache = imports.ToList();
			return this.usedNamespaceCache;
        }

		private IEnumerable<CodeImport> GetUsedNamespacesFromChildren(CodeElements elements)
        {
            var ret = new List<CodeImport>();

            foreach (CodeElement elem in elements)
            {
                // iterate all namespaces (even if they are external)
                // > they might contain project code
                if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace)
                {
                    // Only drill into namespace if it's for this type.
					// TODO: Make sure current class is also a child of this namespace / sibling to these using statements.
                    var codeNamespace = (CodeNamespace)elem;
                    if (codeNamespace.Name == this.FirstCodeClass.Namespace.Name)
                    {
                        ret.AddRange(GetUsedNamespacesFromChildren(codeNamespace.Members));
                    }
                }
                // if its not a namespace but external
                // > ignore it
                else if (elem.InfoLocation == EnvDTE.vsCMInfoLocation.vsCMInfoLocationExternal)
                {
                    continue;
                }
                // if its from the project
                // > check its members
                else if (elem.IsCodeType)
                {
                    ret.AddRange(GetUsedNamespacesFromChildren(((CodeType)elem).Members));
                }

                // if this item is of the desired type
                // > store it
                if (elem is CodeImport)
                {
                    ret.Add((CodeImport)elem);
                }
            }

            return ret;
        }

        private void WriteUsings()
        {
            foreach (var import in this.GetUsedNamespaces())
            {
                this.output.WriteLine("using " + import + ";"); 
            }
        }

        private void WriteClass(string mainClassSignature = null, string mainClassHeader = null, Action renderMainClass = null, Action renderExtensionClass = null)
        {
            var classHierarchy = GetEnclosingClasses();

            for (var i = 0; i < classHierarchy.Count - 1; i++)
            {
                this.output.WriteLine("public partial class " + this.GetClassSignature(classHierarchy[i]));
                this.output.WriteLine("{");
				this.output.PushIndent(Tab);
            }

            var name = this.GetClassSignature(classHierarchy.Last());

            if (renderMainClass != null)
            {
				if (mainClassHeader != null)
                {
					this.output.WriteLine(mainClassHeader);
                }

                this.output.WriteLine("public partial class " + name + " " + (mainClassSignature ?? string.Empty));
                this.output.WriteLine("{");
				this.output.PushIndent(Tab);
                renderMainClass();
				this.output.PopIndent();
                this.output.WriteLine("}");
            }

            if (renderExtensionClass != null)
            {
				if (renderMainClass != null)
				{
					this.output.WriteLine("");
				}

                this.output.WriteLine("public static partial class " + this.CompanionClassName);
                this.output.WriteLine("{");
				this.output.PushIndent(Tab);
                renderExtensionClass();
				this.output.PopIndent();
                this.output.WriteLine("}");
            }

            for (var i = 0; i < classHierarchy.Count - 1; i++)
            {
				this.output.PopIndent();
                this.output.WriteLine("}");
            }
        }

        private IReadOnlyList<CodeClass> GetEnclosingClasses()
        {
            var classHierarchy = new List<CodeClass>();
            var currentClass = this.FirstCodeClass;
            classHierarchy.Add(currentClass);
            while (currentClass.Parent is CodeClass)
            {
                var parentClass = (CodeClass)currentClass.Parent;
                classHierarchy.Add(parentClass);
                currentClass = parentClass;
            } 

            classHierarchy.Reverse();
            return classHierarchy;
        }

        private string GetClassSignature(CodeClass codeClass)
        {
//			  // Not entirely sure why we used to remove generic parameters - seems like that would have completely changed the type reference?
//			  // Removing for now as this doesn't seem sensible without further explanation.
//            var upToTypeParameters = codeClass.FullName.IndexOf("<");
//            if (upToTypeParameters == -1)
//            {
//                upToTypeParameters = codeClass.FullName.Length;
//            }
//            var removeUpTo = Math.Min(upToTypeParameters, codeClass.FullName.LastIndexOf("."));
//            if (removeUpTo == -1)
//            {
//                return codeClass.FullName;
//            }
//			  return codeClass.FullName.Substring(removeUpTo + 1);

            var removeUpTo = codeClass.FullName.LastIndexOf(".");
            if (removeUpTo == -1)
            {
                return codeClass.FullName;
            }

            return codeClass.FullName.Substring(removeUpTo + 1);
        }
    }
#>