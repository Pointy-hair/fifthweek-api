<#@ include file="VisualStudioHelper.ttinclude" once="true" #>
<#@ include file="VisualStudioHelper2.ttinclude" once="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var AutoConstructorAttributeName = "AutoConstructor";
    var OptionalAttributeName = "Optional";

    foreach(UnifiedClass unifiedClass in allClasses)
    {
        var allAttributes = unifiedClass.GetAllAttributes();
        if (allAttributes.All(_ => !_.Name.StartsWith(AutoConstructorAttributeName)))
        {
            continue;
        }

        var parameters = AutoConstructorParameter.GetParametersForClass(unifiedClass);
        if (parameters.Count == 0)
        {
            continue;
        }

        var requiredNullableParameters = parameters.Where(p => p.Attributes.OfType<CodeAttribute>().All(_ => !_.Name.StartsWith(OptionalAttributeName)));

        unifiedClass.WriteNamespaceAndClass(() => {
#>
        public <#= unifiedClass.FirstCodeClass.Name #>(
<#
    for (var i = 0; i < parameters.Count; i++)
    {
        var parameter = parameters[i];
#>
            <#= parameter.TypeName #> <#= parameter.ConstructorParameter #><#= i < parameters.Count - 1 ? ", " : ")" #>
<#
    }
#>
        {
<#
    foreach(var parameter in requiredNullableParameters)
    {
#>
            if (<#= parameter.ConstructorParameter #> == null)
            {
                throw new ArgumentNullException("<#= parameter.ConstructorParameter #>");
            }

<#
    }

    foreach(var parameter in parameters)
    {
#>
            this.<#= parameter.AssigneeName #> = <#= parameter.ConstructorParameter #>;
<#
    }
#>
        }
<#
        });
    }
#>
<#+
    public class AutoConstructorParameter
    {
        public string TypeName;
        public string ConstructorParameter;
        public string AssigneeName;
        public CodeElements Attributes;

        public static IReadOnlyList<AutoConstructorParameter> GetParametersForClass(UnifiedClass unifiedClass)
        {
            return unifiedClass.GetAllPublicGetters().Select(_ => new AutoConstructorParameter
            { 
                TypeName = _.Type.AsFullName, 
                ConstructorParameter = ToLowerCamelCase(_.Name),
                AssigneeName = _.Name,
                Attributes = _.Attributes
            }).Concat(unifiedClass.GetAllPrivateReadOnlyFields().Select(_ => new AutoConstructorParameter
            { 
                TypeName = _.Type.AsFullName, 
                ConstructorParameter = ToLowerCamelCase(_.Name),
                AssigneeName = _.Name,
                Attributes = _.Attributes
            }))
            .ToList();
        }

        public static IReadOnlyList<AutoConstructorParameter> GetParametersForProperties(IEnumerable<CodeProperty> properties)
        {
            return properties.Select(_ => new AutoConstructorParameter
            { 
                TypeName = _.Type.AsFullName, 
                ConstructorParameter = ToLowerCamelCase(_.Name),
                AssigneeName = _.Name,
                Attributes = _.Attributes
            })
            .ToList();
        }
    }
#>
