<#@ include file="VisualStudioHelper.ttinclude" once="true" #>
<#@ include file="VisualStudioHelper2.ttinclude" once="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var AutoConstructorAttributeName = "AutoConstructor";

    foreach(var unifiedClass in UnifiedClassesInProject.Values)
    {
        var allAttributes = unifiedClass.GetAllAttributes();
        if (!allAttributes.Any(_ => _.Name.StartsWith(AutoConstructorAttributeName) || _.Name.StartsWith(AutoPrimitiveAttributeName)))
        {
            continue;
        }

        var parameters = AutoConstructorParameter.GetParametersForClass(unifiedClass);
        if (parameters.Count == 0)
        {
            continue;
        }

        unifiedClass.WriteNamespaceAndClass(() => {
			RenderConstructor(unifiedClass.FirstCodeClass.Name, parameters, this);
        });
    }
#>
<#+
	public const string OptionalAttributeName = "Optional";

	public static void RenderConstructor(string className, IReadOnlyList<AutoConstructorParameter> parameters, TextTransformation output)
	{
		var requiredNullableParameters = parameters.Where(p => p.Attributes.OfType<CodeAttribute>().All(_ => !_.Name.StartsWith(OptionalAttributeName)));

		output.WriteLine("public " + className + "(");
		output.PushIndent(Tab);

		for (var i = 0; i < parameters.Count; i++)
		{
			var parameter = parameters[i];
			output.Write(parameter.TypeName);
			output.Write(" ");
			output.Write(parameter.ConstructorParameter);
			if (i < parameters.Count - 1)
            {
				output.WriteLine(",");
            }
			else
            {
				output.WriteLine(")");
            }
		}

		output.PopIndent();

		output.WriteLine("{");
		output.PushIndent(Tab);

		foreach(var parameter in requiredNullableParameters)
		{
			output.WriteLine("if (" + parameter.ConstructorParameter + " == null)");
			output.WriteLine("{");
			output.PushIndent(Tab);
			output.WriteLine("throw new ArgumentNullException(\"" + parameter.ConstructorParameter + "\");");
			output.PopIndent();
			output.WriteLine("}");
			output.WriteLine("");
		}

		foreach(var parameter in parameters)
		{
			output.WriteLine("this." + parameter.AssigneeName + " = " + parameter.ConstructorParameter + ";");
		}

		output.PopIndent();
		output.WriteLine("}");
	}

    public class AutoConstructorParameter
    {
        public string TypeName;
        public string ConstructorParameter;
        public string AssigneeName;
        public CodeElements Attributes;

        public static IReadOnlyList<AutoConstructorParameter> GetParametersForClass(UnifiedClass unifiedClass)
        {
            return unifiedClass.GetAllPublicGetters().Select(_ => new AutoConstructorParameter
            { 
                TypeName = _.Type.AsFullName, 
                ConstructorParameter = ToLowerCamelCase(_.Name),
                AssigneeName = _.Name,
                Attributes = _.Attributes
            }).Concat(unifiedClass.GetAllPrivateReadOnlyFields().Select(_ => new AutoConstructorParameter
            { 
                TypeName = _.Type.AsFullName, 
                ConstructorParameter = ToLowerCamelCase(_.Name),
                AssigneeName = _.Name,
                Attributes = _.Attributes
            }))
            .ToList();
        }

        public static IReadOnlyList<AutoConstructorParameter> GetParametersForProperties(IEnumerable<CodeProperty> properties)
        {
            return properties.Select(_ => new AutoConstructorParameter
            { 
                TypeName = _.Type.AsFullName, 
                ConstructorParameter = ToLowerCamelCase(_.Name),
                AssigneeName = _.Name,
                Attributes = _.Attributes
            })
            .ToList();
        }
    }
#>
